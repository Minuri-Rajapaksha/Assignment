// <auto-generated />
using System;
using Data.DbFactory.Application;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(AdraContext))]
    partial class AdraContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Shared.Model.DB.Application.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountName")
                        .IsUnique()
                        .HasName("UQ__Account__406E0D2E8A842AA5");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Shared.Model.DB.Application.AccountBalance", b =>
                {
                    b.Property<int>("AccountBalanceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<decimal>("Balance");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<int>("PeriodId");

                    b.HasKey("AccountBalanceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PeriodId");

                    b.HasIndex("AccountId", "PeriodId")
                        .IsUnique()
                        .HasName("UQ_AccountBalance");

                    b.ToTable("AccountBalance");
                });

            modelBuilder.Entity("Shared.Model.DB.Application.Period", b =>
                {
                    b.Property<int>("PeriodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("Period1")
                        .HasColumnName("Period")
                        .HasColumnType("datetime");

                    b.HasKey("PeriodId");

                    b.HasIndex("Discription")
                        .IsUnique()
                        .HasName("UQ__Period__AC417D3BC5290CAD");

                    b.ToTable("Period");
                });

            modelBuilder.Entity("Shared.Model.DB.Application.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("PermissionId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Shared.Model.DB.Application.RolePermission", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionId");

                    b.Property<int>("RoleId");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("PermissionId", "RoleId")
                        .IsUnique()
                        .HasName("UQ_RolePermission");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("Shared.Model.DB.Application.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discription")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Shared.Model.DB.Application.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("RoleId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("UserId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("UQ__User__C9F28456A934F3EA");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Shared.Model.DB.Application.Account", b =>
                {
                    b.HasOne("Shared.Model.DB.Application.User", "CreatedByNavigation")
                        .WithMany("Account")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Account__Created__440B1D61");
                });

            modelBuilder.Entity("Shared.Model.DB.Application.AccountBalance", b =>
                {
                    b.HasOne("Shared.Model.DB.Application.Account", "Account")
                        .WithMany("AccountBalance")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__AccountBa__Accou__4AB81AF0");

                    b.HasOne("Shared.Model.DB.Application.User", "CreatedByNavigation")
                        .WithMany("AccountBalance")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__AccountBa__Creat__4CA06362");

                    b.HasOne("Shared.Model.DB.Application.Period", "Period")
                        .WithMany("AccountBalance")
                        .HasForeignKey("PeriodId")
                        .HasConstraintName("FK__AccountBa__Perio__4BAC3F29");
                });

            modelBuilder.Entity("Shared.Model.DB.Application.RolePermission", b =>
                {
                    b.HasOne("Shared.Model.DB.Application.Permission", "Permission")
                        .WithMany("RolePermission")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK__RolePermi__Permi__3C69FB99");

                    b.HasOne("Shared.Model.DB.Application.Roles", "Role")
                        .WithMany("RolePermission")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__RolePermi__RoleI__3D5E1FD2");
                });
#pragma warning restore 612, 618
        }
    }
}
